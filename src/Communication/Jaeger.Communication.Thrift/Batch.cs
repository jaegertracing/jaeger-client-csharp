/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System.Collections.Generic;
using System.Text;
using System.Threading;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;

#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling

namespace Jaeger.Thrift
{

  public partial class Batch : TBase
  {
    private long _seqNo;
    private global::Jaeger.Thrift.ClientStats _stats;

    public global::Jaeger.Thrift.Process Process { get; set; }

    public List<global::Jaeger.Thrift.Span> Spans { get; set; }

    public long SeqNo
    {
      get
      {
        return _seqNo;
      }
      set
      {
        __isset.seqNo = true;
        this._seqNo = value;
      }
    }

    public global::Jaeger.Thrift.ClientStats Stats
    {
      get
      {
        return _stats;
      }
      set
      {
        __isset.stats = true;
        this._stats = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool seqNo;
      public bool stats;
    }

    public Batch()
    {
    }

    public Batch(global::Jaeger.Thrift.Process process, List<global::Jaeger.Thrift.Span> spans) : this()
    {
      this.Process = process;
      this.Spans = spans;
    }

    public Batch DeepCopy()
    {
      var tmp32 = new Batch();
      if((Process != null))
      {
        tmp32.Process = (global::Jaeger.Thrift.Process)this.Process.DeepCopy();
      }
      if((Spans != null))
      {
        tmp32.Spans = this.Spans.DeepCopy();
      }
      if(__isset.seqNo)
      {
        tmp32.SeqNo = this.SeqNo;
      }
      tmp32.__isset.seqNo = this.__isset.seqNo;
      if((Stats != null) && __isset.stats)
      {
        tmp32.Stats = (global::Jaeger.Thrift.ClientStats)this.Stats.DeepCopy();
      }
      tmp32.__isset.stats = this.__isset.stats;
      return tmp32;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_process = false;
        bool isset_spans = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                Process = new global::Jaeger.Thrift.Process();
                await Process.ReadAsync(iprot, cancellationToken);
                isset_process = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.List)
              {
                {
                  TList _list33 = await iprot.ReadListBeginAsync(cancellationToken);
                  Spans = new List<global::Jaeger.Thrift.Span>(_list33.Count);
                  for(int _i34 = 0; _i34 < _list33.Count; ++_i34)
                  {
                    global::Jaeger.Thrift.Span _elem35;
                    _elem35 = new global::Jaeger.Thrift.Span();
                    await _elem35.ReadAsync(iprot, cancellationToken);
                    Spans.Add(_elem35);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
                isset_spans = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I64)
              {
                SeqNo = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Struct)
              {
                Stats = new global::Jaeger.Thrift.ClientStats();
                await Stats.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_process)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_spans)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("Batch");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if((Process != null))
        {
          field.Name = "process";
          field.Type = TType.Struct;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await Process.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Spans != null))
        {
          field.Name = "spans";
          field.Type = TType.List;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Spans.Count), cancellationToken);
            foreach (global::Jaeger.Thrift.Span _iter36 in Spans)
            {
              await _iter36.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.seqNo)
        {
          field.Name = "seqNo";
          field.Type = TType.I64;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI64Async(SeqNo, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Stats != null) && __isset.stats)
        {
          field.Name = "stats";
          field.Type = TType.Struct;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await Stats.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is Batch other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return System.Object.Equals(Process, other.Process)
        && TCollections.Equals(Spans, other.Spans)
        && ((__isset.seqNo == other.__isset.seqNo) && ((!__isset.seqNo) || (System.Object.Equals(SeqNo, other.SeqNo))))
        && ((__isset.stats == other.__isset.stats) && ((!__isset.stats) || (System.Object.Equals(Stats, other.Stats))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Process != null))
        {
          hashcode = (hashcode * 397) + Process.GetHashCode();
        }
        if((Spans != null))
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Spans);
        }
        if(__isset.seqNo)
        {
          hashcode = (hashcode * 397) + SeqNo.GetHashCode();
        }
        if((Stats != null) && __isset.stats)
        {
          hashcode = (hashcode * 397) + Stats.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("Batch(");
      if((Process != null))
      {
        sb.Append(", Process: ");
        Process.ToString(sb);
      }
      if((Spans != null))
      {
        sb.Append(", Spans: ");
        Spans.ToString(sb);
      }
      if(__isset.seqNo)
      {
        sb.Append(", SeqNo: ");
        SeqNo.ToString(sb);
      }
      if((Stats != null) && __isset.stats)
      {
        sb.Append(", Stats: ");
        Stats.ToString(sb);
      }
      sb.Append(')');
      return sb.ToString();
    }
  }

}
