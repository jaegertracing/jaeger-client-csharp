/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System.Text;
using System.Threading;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;

#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling

namespace Jaeger.Thrift.Crossdock
{

  public partial class Downstream : TBase
  {
    private global::Jaeger.Thrift.Crossdock.Downstream _downstream;

    public string ServiceName { get; set; }

    public string ServerRole { get; set; }

    public string Host { get; set; }

    public string Port { get; set; }

    /// <summary>
    /// 
    /// <seealso cref="global::Jaeger.Thrift.Crossdock.Transport"/>
    /// </summary>
    public global::Jaeger.Thrift.Crossdock.Transport Transport { get; set; }

    public global::Jaeger.Thrift.Crossdock.Downstream Downstream_
    {
      get
      {
        return _downstream;
      }
      set
      {
        __isset.downstream = true;
        this._downstream = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool downstream;
    }

    public Downstream()
    {
    }

    public Downstream(string serviceName, string serverRole, string host, string port, global::Jaeger.Thrift.Crossdock.Transport transport) : this()
    {
      this.ServiceName = serviceName;
      this.ServerRole = serverRole;
      this.Host = host;
      this.Port = port;
      this.Transport = transport;
    }

    public Downstream DeepCopy()
    {
      var tmp0 = new Downstream();
      if((ServiceName != null))
      {
        tmp0.ServiceName = this.ServiceName;
      }
      if((ServerRole != null))
      {
        tmp0.ServerRole = this.ServerRole;
      }
      if((Host != null))
      {
        tmp0.Host = this.Host;
      }
      if((Port != null))
      {
        tmp0.Port = this.Port;
      }
      tmp0.Transport = this.Transport;
      if((Downstream_ != null) && __isset.downstream)
      {
        tmp0.Downstream_ = (global::Jaeger.Thrift.Crossdock.Downstream)this.Downstream_.DeepCopy();
      }
      tmp0.__isset.downstream = this.__isset.downstream;
      return tmp0;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_serviceName = false;
        bool isset_serverRole = false;
        bool isset_host = false;
        bool isset_port = false;
        bool isset_transport = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                ServiceName = await iprot.ReadStringAsync(cancellationToken);
                isset_serviceName = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                ServerRole = await iprot.ReadStringAsync(cancellationToken);
                isset_serverRole = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Host = await iprot.ReadStringAsync(cancellationToken);
                isset_host = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                Port = await iprot.ReadStringAsync(cancellationToken);
                isset_port = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.I32)
              {
                Transport = (global::Jaeger.Thrift.Crossdock.Transport)await iprot.ReadI32Async(cancellationToken);
                isset_transport = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.Struct)
              {
                Downstream_ = new global::Jaeger.Thrift.Crossdock.Downstream();
                await Downstream_.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_serviceName)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_serverRole)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_host)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_port)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_transport)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("Downstream");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if((ServiceName != null))
        {
          field.Name = "serviceName";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(ServiceName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((ServerRole != null))
        {
          field.Name = "serverRole";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(ServerRole, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Host != null))
        {
          field.Name = "host";
          field.Type = TType.String;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Host, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Port != null))
        {
          field.Name = "port";
          field.Type = TType.String;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Port, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        field.Name = "transport";
        field.Type = TType.I32;
        field.ID = 5;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)Transport, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if((Downstream_ != null) && __isset.downstream)
        {
          field.Name = "downstream";
          field.Type = TType.Struct;
          field.ID = 6;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await Downstream_.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is Downstream other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return System.Object.Equals(ServiceName, other.ServiceName)
        && System.Object.Equals(ServerRole, other.ServerRole)
        && System.Object.Equals(Host, other.Host)
        && System.Object.Equals(Port, other.Port)
        && System.Object.Equals(Transport, other.Transport)
        && ((__isset.downstream == other.__isset.downstream) && ((!__isset.downstream) || (System.Object.Equals(Downstream_, other.Downstream_))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((ServiceName != null))
        {
          hashcode = (hashcode * 397) + ServiceName.GetHashCode();
        }
        if((ServerRole != null))
        {
          hashcode = (hashcode * 397) + ServerRole.GetHashCode();
        }
        if((Host != null))
        {
          hashcode = (hashcode * 397) + Host.GetHashCode();
        }
        if((Port != null))
        {
          hashcode = (hashcode * 397) + Port.GetHashCode();
        }
        hashcode = (hashcode * 397) + Transport.GetHashCode();
        if((Downstream_ != null) && __isset.downstream)
        {
          hashcode = (hashcode * 397) + Downstream_.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("Downstream(");
      if((ServiceName != null))
      {
        sb.Append(", ServiceName: ");
        ServiceName.ToString(sb);
      }
      if((ServerRole != null))
      {
        sb.Append(", ServerRole: ");
        ServerRole.ToString(sb);
      }
      if((Host != null))
      {
        sb.Append(", Host: ");
        Host.ToString(sb);
      }
      if((Port != null))
      {
        sb.Append(", Port: ");
        Port.ToString(sb);
      }
      sb.Append(", Transport: ");
      Transport.ToString(sb);
      if((Downstream_ != null) && __isset.downstream)
      {
        sb.Append(", Downstream_: ");
        Downstream_.ToString(sb);
      }
      sb.Append(')');
      return sb.ToString();
    }
  }

}
