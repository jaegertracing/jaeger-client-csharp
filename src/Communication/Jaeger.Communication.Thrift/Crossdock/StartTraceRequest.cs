/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System.Text;
using System.Threading;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;

#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling

namespace Jaeger.Thrift.Crossdock
{

  public partial class StartTraceRequest : TBase
  {

    public string ServerRole { get; set; }

    public bool Sampled { get; set; }

    public string Baggage { get; set; }

    public global::Jaeger.Thrift.Crossdock.Downstream Downstream { get; set; }

    public StartTraceRequest()
    {
    }

    public StartTraceRequest(string serverRole, bool sampled, string baggage, global::Jaeger.Thrift.Crossdock.Downstream downstream) : this()
    {
      this.ServerRole = serverRole;
      this.Sampled = sampled;
      this.Baggage = baggage;
      this.Downstream = downstream;
    }

    public StartTraceRequest DeepCopy()
    {
      var tmp2 = new StartTraceRequest();
      if((ServerRole != null))
      {
        tmp2.ServerRole = this.ServerRole;
      }
      tmp2.Sampled = this.Sampled;
      if((Baggage != null))
      {
        tmp2.Baggage = this.Baggage;
      }
      if((Downstream != null))
      {
        tmp2.Downstream = (global::Jaeger.Thrift.Crossdock.Downstream)this.Downstream.DeepCopy();
      }
      return tmp2;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_serverRole = false;
        bool isset_sampled = false;
        bool isset_baggage = false;
        bool isset_downstream = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                ServerRole = await iprot.ReadStringAsync(cancellationToken);
                isset_serverRole = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Bool)
              {
                Sampled = await iprot.ReadBoolAsync(cancellationToken);
                isset_sampled = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Baggage = await iprot.ReadStringAsync(cancellationToken);
                isset_baggage = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Struct)
              {
                Downstream = new global::Jaeger.Thrift.Crossdock.Downstream();
                await Downstream.ReadAsync(iprot, cancellationToken);
                isset_downstream = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_serverRole)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_sampled)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_baggage)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_downstream)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("StartTraceRequest");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if((ServerRole != null))
        {
          field.Name = "serverRole";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(ServerRole, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        field.Name = "sampled";
        field.Type = TType.Bool;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(Sampled, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if((Baggage != null))
        {
          field.Name = "baggage";
          field.Type = TType.String;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Baggage, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Downstream != null))
        {
          field.Name = "downstream";
          field.Type = TType.Struct;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await Downstream.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is StartTraceRequest other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return System.Object.Equals(ServerRole, other.ServerRole)
        && System.Object.Equals(Sampled, other.Sampled)
        && System.Object.Equals(Baggage, other.Baggage)
        && System.Object.Equals(Downstream, other.Downstream);
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((ServerRole != null))
        {
          hashcode = (hashcode * 397) + ServerRole.GetHashCode();
        }
        hashcode = (hashcode * 397) + Sampled.GetHashCode();
        if((Baggage != null))
        {
          hashcode = (hashcode * 397) + Baggage.GetHashCode();
        }
        if((Downstream != null))
        {
          hashcode = (hashcode * 397) + Downstream.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("StartTraceRequest(");
      if((ServerRole != null))
      {
        sb.Append(", ServerRole: ");
        ServerRole.ToString(sb);
      }
      sb.Append(", Sampled: ");
      Sampled.ToString(sb);
      if((Baggage != null))
      {
        sb.Append(", Baggage: ");
        Baggage.ToString(sb);
      }
      if((Downstream != null))
      {
        sb.Append(", Downstream: ");
        Downstream.ToString(sb);
      }
      sb.Append(')');
      return sb.ToString();
    }
  }

}
