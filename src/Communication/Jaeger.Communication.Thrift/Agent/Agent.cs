/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling

namespace Jaeger.Thrift.Agent
{
  public partial class Agent
  {
    public interface IAsync
    {
      global::System.Threading.Tasks.Task emitZipkinBatchAsync(List<global::Jaeger.Thrift.Agent.Zipkin.Span> spans, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task emitBatchAsync(global::Jaeger.Thrift.Batch batch, CancellationToken cancellationToken = default);

    }


    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)      {
      }
      public async global::System.Threading.Tasks.Task emitZipkinBatchAsync(List<global::Jaeger.Thrift.Agent.Zipkin.Span> spans, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("emitZipkinBatch", TMessageType.Oneway, SeqId), cancellationToken);
        
        var args = new InternalStructs.emitZipkinBatchArgs() {
          Spans = spans,
        };
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }
      public async global::System.Threading.Tasks.Task emitBatchAsync(global::Jaeger.Thrift.Batch batch, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("emitBatch", TMessageType.Oneway, SeqId), cancellationToken);
        
        var args = new InternalStructs.emitBatchArgs() {
          Batch = batch,
        };
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }
    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor> _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["emitZipkinBatch"] = emitZipkinBatch_ProcessAsync;
        processMap_["emitBatch"] = emitBatch_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out ProcessFunction fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task emitZipkinBatch_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new InternalStructs.emitZipkinBatchArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.emitZipkinBatchAsync(args.Spans, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          var sErr = $"Error occurred in {GetType().FullName}: {ex.Message}";
          if(_logger != null)
            _logger.LogError(ex, sErr);
          else
            Console.Error.WriteLine(sErr);
        }
      }

      public async global::System.Threading.Tasks.Task emitBatch_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new InternalStructs.emitBatchArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.emitBatchAsync(args.Batch, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          var sErr = $"Error occurred in {GetType().FullName}: {ex.Message}";
          if(_logger != null)
            _logger.LogError(ex, sErr);
          else
            Console.Error.WriteLine(sErr);
        }
      }

    }

    public class InternalStructs
    {

      public partial class emitZipkinBatchArgs : TBase
      {
        private List<global::Jaeger.Thrift.Agent.Zipkin.Span> _spans;

        public List<global::Jaeger.Thrift.Agent.Zipkin.Span> Spans
        {
          get
          {
            return _spans;
          }
          set
          {
            __isset.spans = true;
            this._spans = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool spans;
        }

        public emitZipkinBatchArgs()
        {
        }

        public emitZipkinBatchArgs DeepCopy()
        {
          var tmp0 = new emitZipkinBatchArgs();
          if((Spans != null) && __isset.spans)
          {
            tmp0.Spans = this.Spans.DeepCopy();
          }
          tmp0.__isset.spans = this.__isset.spans;
          return tmp0;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.List)
                  {
                    {
                      TList _list1 = await iprot.ReadListBeginAsync(cancellationToken);
                      Spans = new List<global::Jaeger.Thrift.Agent.Zipkin.Span>(_list1.Count);
                      for(int _i2 = 0; _i2 < _list1.Count; ++_i2)
                      {
                        global::Jaeger.Thrift.Agent.Zipkin.Span _elem3;
                        _elem3 = new global::Jaeger.Thrift.Agent.Zipkin.Span();
                        await _elem3.ReadAsync(iprot, cancellationToken);
                        Spans.Add(_elem3);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var struc = new TStruct("emitZipkinBatch_args");
            await oprot.WriteStructBeginAsync(struc, cancellationToken);
            var field = new TField();
            if((Spans != null) && __isset.spans)
            {
              field.Name = "spans";
              field.Type = TType.List;
              field.ID = 1;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              {
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Spans.Count), cancellationToken);
                foreach (global::Jaeger.Thrift.Agent.Zipkin.Span _iter4 in Spans)
                {
                  await _iter4.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
              }
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is emitZipkinBatchArgs other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.spans == other.__isset.spans) && ((!__isset.spans) || (TCollections.Equals(Spans, other.Spans))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Spans != null) && __isset.spans)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Spans);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var sb = new StringBuilder("emitZipkinBatch_args(");
          int tmp5 = 0;
          if((Spans != null) && __isset.spans)
          {
            if(0 < tmp5++) { sb.Append(", "); }
            sb.Append("Spans: ");
            Spans.ToString(sb);
          }
          sb.Append(')');
          return sb.ToString();
        }
      }


      public partial class emitBatchArgs : TBase
      {
        private global::Jaeger.Thrift.Batch _batch;

        public global::Jaeger.Thrift.Batch Batch
        {
          get
          {
            return _batch;
          }
          set
          {
            __isset.batch = true;
            this._batch = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool batch;
        }

        public emitBatchArgs()
        {
        }

        public emitBatchArgs DeepCopy()
        {
          var tmp6 = new emitBatchArgs();
          if((Batch != null) && __isset.batch)
          {
            tmp6.Batch = (global::Jaeger.Thrift.Batch)this.Batch.DeepCopy();
          }
          tmp6.__isset.batch = this.__isset.batch;
          return tmp6;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Batch = new global::Jaeger.Thrift.Batch();
                    await Batch.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var struc = new TStruct("emitBatch_args");
            await oprot.WriteStructBeginAsync(struc, cancellationToken);
            var field = new TField();
            if((Batch != null) && __isset.batch)
            {
              field.Name = "batch";
              field.Type = TType.Struct;
              field.ID = 1;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await Batch.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is emitBatchArgs other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.batch == other.__isset.batch) && ((!__isset.batch) || (System.Object.Equals(Batch, other.Batch))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Batch != null) && __isset.batch)
            {
              hashcode = (hashcode * 397) + Batch.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var sb = new StringBuilder("emitBatch_args(");
          int tmp7 = 0;
          if((Batch != null) && __isset.batch)
          {
            if(0 < tmp7++) { sb.Append(", "); }
            sb.Append("Batch: ");
            Batch.ToString(sb);
          }
          sb.Append(')');
          return sb.ToString();
        }
      }

    }

  }
}
