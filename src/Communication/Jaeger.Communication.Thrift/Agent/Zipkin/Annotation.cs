/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System.Text;
using System.Threading;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;

#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling

namespace Jaeger.Thrift.Agent.Zipkin
{

  /// <summary>
  /// An annotation is similar to a log statement. It includes a host field which
  /// allows these events to be attributed properly, and also aggregatable.
  /// </summary>
  public partial class Annotation : TBase
  {
    private long _timestamp;
    private string _value;
    private global::Jaeger.Thrift.Agent.Zipkin.Endpoint _host;

    /// <summary>
    /// Microseconds from epoch.
    /// 
    /// This value should use the most precise value possible. For example,
    /// gettimeofday or syncing nanoTime against a tick of currentTimeMillis.
    /// </summary>
    public long Timestamp
    {
      get
      {
        return _timestamp;
      }
      set
      {
        __isset.timestamp = true;
        this._timestamp = value;
      }
    }

    public string Value
    {
      get
      {
        return _value;
      }
      set
      {
        __isset.@value = true;
        this._value = value;
      }
    }

    /// <summary>
    /// Always the host that recorded the event. By specifying the host you allow
    /// rollup of all events (such as client requests to a service) by IP address.
    /// </summary>
    public global::Jaeger.Thrift.Agent.Zipkin.Endpoint Host
    {
      get
      {
        return _host;
      }
      set
      {
        __isset.host = true;
        this._host = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool timestamp;
      public bool @value;
      public bool host;
    }

    public Annotation()
    {
    }

    public Annotation DeepCopy()
    {
      var tmp2 = new Annotation();
      if(__isset.timestamp)
      {
        tmp2.Timestamp = this.Timestamp;
      }
      tmp2.__isset.timestamp = this.__isset.timestamp;
      if((Value != null) && __isset.@value)
      {
        tmp2.Value = this.Value;
      }
      tmp2.__isset.@value = this.__isset.@value;
      if((Host != null) && __isset.host)
      {
        tmp2.Host = (global::Jaeger.Thrift.Agent.Zipkin.Endpoint)this.Host.DeepCopy();
      }
      tmp2.__isset.host = this.__isset.host;
      return tmp2;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64)
              {
                Timestamp = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Value = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Struct)
              {
                Host = new global::Jaeger.Thrift.Agent.Zipkin.Endpoint();
                await Host.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("Annotation");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if(__isset.timestamp)
        {
          field.Name = "timestamp";
          field.Type = TType.I64;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI64Async(Timestamp, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Value != null) && __isset.@value)
        {
          field.Name = "value";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Value, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Host != null) && __isset.host)
        {
          field.Name = "host";
          field.Type = TType.Struct;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await Host.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is Annotation other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.timestamp == other.__isset.timestamp) && ((!__isset.timestamp) || (System.Object.Equals(Timestamp, other.Timestamp))))
        && ((__isset.@value == other.__isset.@value) && ((!__isset.@value) || (System.Object.Equals(Value, other.Value))))
        && ((__isset.host == other.__isset.host) && ((!__isset.host) || (System.Object.Equals(Host, other.Host))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.timestamp)
        {
          hashcode = (hashcode * 397) + Timestamp.GetHashCode();
        }
        if((Value != null) && __isset.@value)
        {
          hashcode = (hashcode * 397) + Value.GetHashCode();
        }
        if((Host != null) && __isset.host)
        {
          hashcode = (hashcode * 397) + Host.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("Annotation(");
      int tmp3 = 0;
      if(__isset.timestamp)
      {
        if(0 < tmp3++) { sb.Append(", "); }
        sb.Append("Timestamp: ");
        Timestamp.ToString(sb);
      }
      if((Value != null) && __isset.@value)
      {
        if(0 < tmp3++) { sb.Append(", "); }
        sb.Append("Value: ");
        Value.ToString(sb);
      }
      if((Host != null) && __isset.host)
      {
        if(0 < tmp3++) { sb.Append(", "); }
        sb.Append("Host: ");
        Host.ToString(sb);
      }
      sb.Append(')');
      return sb.ToString();
    }
  }

}
