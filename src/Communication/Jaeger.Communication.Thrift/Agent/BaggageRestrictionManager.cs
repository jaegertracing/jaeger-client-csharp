/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling

namespace Jaeger.Thrift.Agent
{
  public partial class BaggageRestrictionManager
  {
    public interface IAsync
    {
      /// <summary>
      /// getBaggageRestrictions retrieves the baggage restrictions for a specific service.
      /// Usually, baggageRestrictions apply to all services however there may be situations
      /// where a baggageKey might only be allowed to be set by a specific service.
      /// </summary>
      /// <param name="serviceName"></param>
      global::System.Threading.Tasks.Task<List<global::Jaeger.Thrift.Agent.BaggageRestriction>> getBaggageRestrictionsAsync(string serviceName, CancellationToken cancellationToken = default);

    }


    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)      {
      }
      public async global::System.Threading.Tasks.Task<List<global::Jaeger.Thrift.Agent.BaggageRestriction>> getBaggageRestrictionsAsync(string serviceName, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getBaggageRestrictions", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new InternalStructs.getBaggageRestrictionsArgs() {
          ServiceName = serviceName,
        };
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new InternalStructs.getBaggageRestrictionsResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getBaggageRestrictions failed: unknown result");
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor> _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["getBaggageRestrictions"] = getBaggageRestrictions_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out ProcessFunction fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task getBaggageRestrictions_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new InternalStructs.getBaggageRestrictionsArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new InternalStructs.getBaggageRestrictionsResult();
        try
        {
          result.Success = await _iAsync.getBaggageRestrictionsAsync(args.ServiceName, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("getBaggageRestrictions", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          var sErr = $"Error occurred in {GetType().FullName}: {ex.Message}";
          if(_logger != null)
            _logger.LogError(ex, sErr);
          else
            Console.Error.WriteLine(sErr);
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getBaggageRestrictions", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class getBaggageRestrictionsArgs : TBase
      {
        private string _serviceName;

        public string ServiceName
        {
          get
          {
            return _serviceName;
          }
          set
          {
            __isset.serviceName = true;
            this._serviceName = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool serviceName;
        }

        public getBaggageRestrictionsArgs()
        {
        }

        public getBaggageRestrictionsArgs DeepCopy()
        {
          var tmp2 = new getBaggageRestrictionsArgs();
          if((ServiceName != null) && __isset.serviceName)
          {
            tmp2.ServiceName = this.ServiceName;
          }
          tmp2.__isset.serviceName = this.__isset.serviceName;
          return tmp2;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    ServiceName = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var struc = new TStruct("getBaggageRestrictions_args");
            await oprot.WriteStructBeginAsync(struc, cancellationToken);
            var field = new TField();
            if((ServiceName != null) && __isset.serviceName)
            {
              field.Name = "serviceName";
              field.Type = TType.String;
              field.ID = 1;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(ServiceName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getBaggageRestrictionsArgs other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.serviceName == other.__isset.serviceName) && ((!__isset.serviceName) || (System.Object.Equals(ServiceName, other.ServiceName))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((ServiceName != null) && __isset.serviceName)
            {
              hashcode = (hashcode * 397) + ServiceName.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var sb = new StringBuilder("getBaggageRestrictions_args(");
          int tmp3 = 0;
          if((ServiceName != null) && __isset.serviceName)
          {
            if(0 < tmp3++) { sb.Append(", "); }
            sb.Append("ServiceName: ");
            ServiceName.ToString(sb);
          }
          sb.Append(')');
          return sb.ToString();
        }
      }


      public partial class getBaggageRestrictionsResult : TBase
      {
        private List<global::Jaeger.Thrift.Agent.BaggageRestriction> _success;

        public List<global::Jaeger.Thrift.Agent.BaggageRestriction> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public getBaggageRestrictionsResult()
        {
        }

        public getBaggageRestrictionsResult DeepCopy()
        {
          var tmp4 = new getBaggageRestrictionsResult();
          if((Success != null) && __isset.success)
          {
            tmp4.Success = this.Success.DeepCopy();
          }
          tmp4.__isset.success = this.__isset.success;
          return tmp4;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      TList _list5 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<global::Jaeger.Thrift.Agent.BaggageRestriction>(_list5.Count);
                      for(int _i6 = 0; _i6 < _list5.Count; ++_i6)
                      {
                        global::Jaeger.Thrift.Agent.BaggageRestriction _elem7;
                        _elem7 = new global::Jaeger.Thrift.Agent.BaggageRestriction();
                        await _elem7.ReadAsync(iprot, cancellationToken);
                        Success.Add(_elem7);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var struc = new TStruct("getBaggageRestrictions_result");
            await oprot.WriteStructBeginAsync(struc, cancellationToken);
            var field = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                field.Name = "Success";
                field.Type = TType.List;
                field.ID = 0;
                await oprot.WriteFieldBeginAsync(field, cancellationToken);
                {
                  await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                  foreach (global::Jaeger.Thrift.Agent.BaggageRestriction _iter8 in Success)
                  {
                    await _iter8.WriteAsync(oprot, cancellationToken);
                  }
                  await oprot.WriteListEndAsync(cancellationToken);
                }
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getBaggageRestrictionsResult other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var sb = new StringBuilder("getBaggageRestrictions_result(");
          int tmp9 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp9++) { sb.Append(", "); }
            sb.Append("Success: ");
            Success.ToString(sb);
          }
          sb.Append(')');
          return sb.ToString();
        }
      }

    }

  }
}
