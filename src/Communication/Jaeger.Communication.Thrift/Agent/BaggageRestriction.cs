/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System.Text;
using System.Threading;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;

#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling

namespace Jaeger.Thrift.Agent
{

  public partial class BaggageRestriction : TBase
  {

    public string BaggageKey { get; set; }

    public int MaxValueLength { get; set; }

    public BaggageRestriction()
    {
    }

    public BaggageRestriction(string baggageKey, int maxValueLength) : this()
    {
      this.BaggageKey = baggageKey;
      this.MaxValueLength = maxValueLength;
    }

    public BaggageRestriction DeepCopy()
    {
      var tmp0 = new BaggageRestriction();
      if((BaggageKey != null))
      {
        tmp0.BaggageKey = this.BaggageKey;
      }
      tmp0.MaxValueLength = this.MaxValueLength;
      return tmp0;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_baggageKey = false;
        bool isset_maxValueLength = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                BaggageKey = await iprot.ReadStringAsync(cancellationToken);
                isset_baggageKey = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                MaxValueLength = await iprot.ReadI32Async(cancellationToken);
                isset_maxValueLength = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_baggageKey)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_maxValueLength)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("BaggageRestriction");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if((BaggageKey != null))
        {
          field.Name = "baggageKey";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(BaggageKey, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        field.Name = "maxValueLength";
        field.Type = TType.I32;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(MaxValueLength, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is BaggageRestriction other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return System.Object.Equals(BaggageKey, other.BaggageKey)
        && System.Object.Equals(MaxValueLength, other.MaxValueLength);
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((BaggageKey != null))
        {
          hashcode = (hashcode * 397) + BaggageKey.GetHashCode();
        }
        hashcode = (hashcode * 397) + MaxValueLength.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("BaggageRestriction(");
      if((BaggageKey != null))
      {
        sb.Append(", BaggageKey: ");
        BaggageKey.ToString(sb);
      }
      sb.Append(", MaxValueLength: ");
      MaxValueLength.ToString(sb);
      sb.Append(')');
      return sb.ToString();
    }
  }

}
