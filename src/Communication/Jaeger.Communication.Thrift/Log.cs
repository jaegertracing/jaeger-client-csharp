/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System.Collections.Generic;
using System.Text;
using System.Threading;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;

#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling

namespace Jaeger.Thrift
{

  public partial class Log : TBase
  {

    public long Timestamp { get; set; }

    public List<global::Jaeger.Thrift.Tag> Fields { get; set; }

    public Log()
    {
    }

    public Log(long timestamp, List<global::Jaeger.Thrift.Tag> fields) : this()
    {
      this.Timestamp = timestamp;
      this.Fields = fields;
    }

    public Log DeepCopy()
    {
      var tmp2 = new Log();
      tmp2.Timestamp = this.Timestamp;
      if((Fields != null))
      {
        tmp2.Fields = this.Fields.DeepCopy();
      }
      return tmp2;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_timestamp = false;
        bool isset_fields = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64)
              {
                Timestamp = await iprot.ReadI64Async(cancellationToken);
                isset_timestamp = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.List)
              {
                {
                  TList _list3 = await iprot.ReadListBeginAsync(cancellationToken);
                  Fields = new List<global::Jaeger.Thrift.Tag>(_list3.Count);
                  for(int _i4 = 0; _i4 < _list3.Count; ++_i4)
                  {
                    global::Jaeger.Thrift.Tag _elem5;
                    _elem5 = new global::Jaeger.Thrift.Tag();
                    await _elem5.ReadAsync(iprot, cancellationToken);
                    Fields.Add(_elem5);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
                isset_fields = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_timestamp)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_fields)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("Log");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        field.Name = "timestamp";
        field.Type = TType.I64;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(Timestamp, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if((Fields != null))
        {
          field.Name = "fields";
          field.Type = TType.List;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Fields.Count), cancellationToken);
            foreach (global::Jaeger.Thrift.Tag _iter6 in Fields)
            {
              await _iter6.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is Log other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return System.Object.Equals(Timestamp, other.Timestamp)
        && TCollections.Equals(Fields, other.Fields);
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        hashcode = (hashcode * 397) + Timestamp.GetHashCode();
        if((Fields != null))
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Fields);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("Log(");
      sb.Append(", Timestamp: ");
      Timestamp.ToString(sb);
      if((Fields != null))
      {
        sb.Append(", Fields: ");
        Fields.ToString(sb);
      }
      sb.Append(')');
      return sb.ToString();
    }
  }

}
