/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System.Collections.Generic;
using System.Text;
using System.Threading;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;

#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling

namespace Jaeger.Thrift
{

  public partial class Process : TBase
  {
    private List<global::Jaeger.Thrift.Tag> _tags;

    public string ServiceName { get; set; }

    public List<global::Jaeger.Thrift.Tag> Tags
    {
      get
      {
        return _tags;
      }
      set
      {
        __isset.tags = true;
        this._tags = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool tags;
    }

    public Process()
    {
    }

    public Process(string serviceName) : this()
    {
      this.ServiceName = serviceName;
    }

    public Process DeepCopy()
    {
      var tmp24 = new Process();
      if((ServiceName != null))
      {
        tmp24.ServiceName = this.ServiceName;
      }
      if((Tags != null) && __isset.tags)
      {
        tmp24.Tags = this.Tags.DeepCopy();
      }
      tmp24.__isset.tags = this.__isset.tags;
      return tmp24;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_serviceName = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                ServiceName = await iprot.ReadStringAsync(cancellationToken);
                isset_serviceName = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.List)
              {
                {
                  TList _list25 = await iprot.ReadListBeginAsync(cancellationToken);
                  Tags = new List<global::Jaeger.Thrift.Tag>(_list25.Count);
                  for(int _i26 = 0; _i26 < _list25.Count; ++_i26)
                  {
                    global::Jaeger.Thrift.Tag _elem27;
                    _elem27 = new global::Jaeger.Thrift.Tag();
                    await _elem27.ReadAsync(iprot, cancellationToken);
                    Tags.Add(_elem27);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_serviceName)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("Process");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if((ServiceName != null))
        {
          field.Name = "serviceName";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(ServiceName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Tags != null) && __isset.tags)
        {
          field.Name = "tags";
          field.Type = TType.List;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Tags.Count), cancellationToken);
            foreach (global::Jaeger.Thrift.Tag _iter28 in Tags)
            {
              await _iter28.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is Process other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return System.Object.Equals(ServiceName, other.ServiceName)
        && ((__isset.tags == other.__isset.tags) && ((!__isset.tags) || (TCollections.Equals(Tags, other.Tags))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((ServiceName != null))
        {
          hashcode = (hashcode * 397) + ServiceName.GetHashCode();
        }
        if((Tags != null) && __isset.tags)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Tags);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("Process(");
      if((ServiceName != null))
      {
        sb.Append(", ServiceName: ");
        ServiceName.ToString(sb);
      }
      if((Tags != null) && __isset.tags)
      {
        sb.Append(", Tags: ");
        Tags.ToString(sb);
      }
      sb.Append(')');
      return sb.ToString();
    }
  }

}
