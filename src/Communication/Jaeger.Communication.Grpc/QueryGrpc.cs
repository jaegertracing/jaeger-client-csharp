// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: query.proto
// </auto-generated>
// Original file comments:
// Copyright (c) 2019 The Jaeger Authors.
// Copyright (c) 2018 Uber Technologies, Inc.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Jaeger.ApiV2 {
  public static partial class QueryService
  {
    static readonly string __ServiceName = "jaeger.api_v2.QueryService";

    static readonly grpc::Marshaller<global::Jaeger.ApiV2.GetTraceRequest> __Marshaller_jaeger_api_v2_GetTraceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Jaeger.ApiV2.GetTraceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Jaeger.ApiV2.SpansResponseChunk> __Marshaller_jaeger_api_v2_SpansResponseChunk = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Jaeger.ApiV2.SpansResponseChunk.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Jaeger.ApiV2.ArchiveTraceRequest> __Marshaller_jaeger_api_v2_ArchiveTraceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Jaeger.ApiV2.ArchiveTraceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Jaeger.ApiV2.ArchiveTraceResponse> __Marshaller_jaeger_api_v2_ArchiveTraceResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Jaeger.ApiV2.ArchiveTraceResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Jaeger.ApiV2.FindTracesRequest> __Marshaller_jaeger_api_v2_FindTracesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Jaeger.ApiV2.FindTracesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Jaeger.ApiV2.GetServicesRequest> __Marshaller_jaeger_api_v2_GetServicesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Jaeger.ApiV2.GetServicesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Jaeger.ApiV2.GetServicesResponse> __Marshaller_jaeger_api_v2_GetServicesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Jaeger.ApiV2.GetServicesResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Jaeger.ApiV2.GetOperationsRequest> __Marshaller_jaeger_api_v2_GetOperationsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Jaeger.ApiV2.GetOperationsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Jaeger.ApiV2.GetOperationsResponse> __Marshaller_jaeger_api_v2_GetOperationsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Jaeger.ApiV2.GetOperationsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Jaeger.ApiV2.GetDependenciesRequest> __Marshaller_jaeger_api_v2_GetDependenciesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Jaeger.ApiV2.GetDependenciesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Jaeger.ApiV2.GetDependenciesResponse> __Marshaller_jaeger_api_v2_GetDependenciesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Jaeger.ApiV2.GetDependenciesResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Jaeger.ApiV2.GetTraceRequest, global::Jaeger.ApiV2.SpansResponseChunk> __Method_GetTrace = new grpc::Method<global::Jaeger.ApiV2.GetTraceRequest, global::Jaeger.ApiV2.SpansResponseChunk>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetTrace",
        __Marshaller_jaeger_api_v2_GetTraceRequest,
        __Marshaller_jaeger_api_v2_SpansResponseChunk);

    static readonly grpc::Method<global::Jaeger.ApiV2.ArchiveTraceRequest, global::Jaeger.ApiV2.ArchiveTraceResponse> __Method_ArchiveTrace = new grpc::Method<global::Jaeger.ApiV2.ArchiveTraceRequest, global::Jaeger.ApiV2.ArchiveTraceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ArchiveTrace",
        __Marshaller_jaeger_api_v2_ArchiveTraceRequest,
        __Marshaller_jaeger_api_v2_ArchiveTraceResponse);

    static readonly grpc::Method<global::Jaeger.ApiV2.FindTracesRequest, global::Jaeger.ApiV2.SpansResponseChunk> __Method_FindTraces = new grpc::Method<global::Jaeger.ApiV2.FindTracesRequest, global::Jaeger.ApiV2.SpansResponseChunk>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "FindTraces",
        __Marshaller_jaeger_api_v2_FindTracesRequest,
        __Marshaller_jaeger_api_v2_SpansResponseChunk);

    static readonly grpc::Method<global::Jaeger.ApiV2.GetServicesRequest, global::Jaeger.ApiV2.GetServicesResponse> __Method_GetServices = new grpc::Method<global::Jaeger.ApiV2.GetServicesRequest, global::Jaeger.ApiV2.GetServicesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetServices",
        __Marshaller_jaeger_api_v2_GetServicesRequest,
        __Marshaller_jaeger_api_v2_GetServicesResponse);

    static readonly grpc::Method<global::Jaeger.ApiV2.GetOperationsRequest, global::Jaeger.ApiV2.GetOperationsResponse> __Method_GetOperations = new grpc::Method<global::Jaeger.ApiV2.GetOperationsRequest, global::Jaeger.ApiV2.GetOperationsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetOperations",
        __Marshaller_jaeger_api_v2_GetOperationsRequest,
        __Marshaller_jaeger_api_v2_GetOperationsResponse);

    static readonly grpc::Method<global::Jaeger.ApiV2.GetDependenciesRequest, global::Jaeger.ApiV2.GetDependenciesResponse> __Method_GetDependencies = new grpc::Method<global::Jaeger.ApiV2.GetDependenciesRequest, global::Jaeger.ApiV2.GetDependenciesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDependencies",
        __Marshaller_jaeger_api_v2_GetDependenciesRequest,
        __Marshaller_jaeger_api_v2_GetDependenciesResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Jaeger.ApiV2.QueryReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of QueryService</summary>
    [grpc::BindServiceMethod(typeof(QueryService), "BindService")]
    public abstract partial class QueryServiceBase
    {
      public virtual global::System.Threading.Tasks.Task GetTrace(global::Jaeger.ApiV2.GetTraceRequest request, grpc::IServerStreamWriter<global::Jaeger.ApiV2.SpansResponseChunk> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Jaeger.ApiV2.ArchiveTraceResponse> ArchiveTrace(global::Jaeger.ApiV2.ArchiveTraceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task FindTraces(global::Jaeger.ApiV2.FindTracesRequest request, grpc::IServerStreamWriter<global::Jaeger.ApiV2.SpansResponseChunk> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Jaeger.ApiV2.GetServicesResponse> GetServices(global::Jaeger.ApiV2.GetServicesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Jaeger.ApiV2.GetOperationsResponse> GetOperations(global::Jaeger.ApiV2.GetOperationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Jaeger.ApiV2.GetDependenciesResponse> GetDependencies(global::Jaeger.ApiV2.GetDependenciesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for QueryService</summary>
    public partial class QueryServiceClient : grpc::ClientBase<QueryServiceClient>
    {
      /// <summary>Creates a new client for QueryService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public QueryServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for QueryService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public QueryServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected QueryServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected QueryServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual grpc::AsyncServerStreamingCall<global::Jaeger.ApiV2.SpansResponseChunk> GetTrace(global::Jaeger.ApiV2.GetTraceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTrace(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Jaeger.ApiV2.SpansResponseChunk> GetTrace(global::Jaeger.ApiV2.GetTraceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetTrace, null, options, request);
      }
      public virtual global::Jaeger.ApiV2.ArchiveTraceResponse ArchiveTrace(global::Jaeger.ApiV2.ArchiveTraceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ArchiveTrace(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Jaeger.ApiV2.ArchiveTraceResponse ArchiveTrace(global::Jaeger.ApiV2.ArchiveTraceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ArchiveTrace, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Jaeger.ApiV2.ArchiveTraceResponse> ArchiveTraceAsync(global::Jaeger.ApiV2.ArchiveTraceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ArchiveTraceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Jaeger.ApiV2.ArchiveTraceResponse> ArchiveTraceAsync(global::Jaeger.ApiV2.ArchiveTraceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ArchiveTrace, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Jaeger.ApiV2.SpansResponseChunk> FindTraces(global::Jaeger.ApiV2.FindTracesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FindTraces(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Jaeger.ApiV2.SpansResponseChunk> FindTraces(global::Jaeger.ApiV2.FindTracesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_FindTraces, null, options, request);
      }
      public virtual global::Jaeger.ApiV2.GetServicesResponse GetServices(global::Jaeger.ApiV2.GetServicesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetServices(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Jaeger.ApiV2.GetServicesResponse GetServices(global::Jaeger.ApiV2.GetServicesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetServices, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Jaeger.ApiV2.GetServicesResponse> GetServicesAsync(global::Jaeger.ApiV2.GetServicesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetServicesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Jaeger.ApiV2.GetServicesResponse> GetServicesAsync(global::Jaeger.ApiV2.GetServicesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetServices, null, options, request);
      }
      public virtual global::Jaeger.ApiV2.GetOperationsResponse GetOperations(global::Jaeger.ApiV2.GetOperationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOperations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Jaeger.ApiV2.GetOperationsResponse GetOperations(global::Jaeger.ApiV2.GetOperationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetOperations, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Jaeger.ApiV2.GetOperationsResponse> GetOperationsAsync(global::Jaeger.ApiV2.GetOperationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOperationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Jaeger.ApiV2.GetOperationsResponse> GetOperationsAsync(global::Jaeger.ApiV2.GetOperationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetOperations, null, options, request);
      }
      public virtual global::Jaeger.ApiV2.GetDependenciesResponse GetDependencies(global::Jaeger.ApiV2.GetDependenciesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDependencies(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Jaeger.ApiV2.GetDependenciesResponse GetDependencies(global::Jaeger.ApiV2.GetDependenciesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDependencies, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Jaeger.ApiV2.GetDependenciesResponse> GetDependenciesAsync(global::Jaeger.ApiV2.GetDependenciesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDependenciesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Jaeger.ApiV2.GetDependenciesResponse> GetDependenciesAsync(global::Jaeger.ApiV2.GetDependenciesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDependencies, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override QueryServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new QueryServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(QueryServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetTrace, serviceImpl.GetTrace)
          .AddMethod(__Method_ArchiveTrace, serviceImpl.ArchiveTrace)
          .AddMethod(__Method_FindTraces, serviceImpl.FindTraces)
          .AddMethod(__Method_GetServices, serviceImpl.GetServices)
          .AddMethod(__Method_GetOperations, serviceImpl.GetOperations)
          .AddMethod(__Method_GetDependencies, serviceImpl.GetDependencies).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, QueryServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetTrace, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Jaeger.ApiV2.GetTraceRequest, global::Jaeger.ApiV2.SpansResponseChunk>(serviceImpl.GetTrace));
      serviceBinder.AddMethod(__Method_ArchiveTrace, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Jaeger.ApiV2.ArchiveTraceRequest, global::Jaeger.ApiV2.ArchiveTraceResponse>(serviceImpl.ArchiveTrace));
      serviceBinder.AddMethod(__Method_FindTraces, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Jaeger.ApiV2.FindTracesRequest, global::Jaeger.ApiV2.SpansResponseChunk>(serviceImpl.FindTraces));
      serviceBinder.AddMethod(__Method_GetServices, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Jaeger.ApiV2.GetServicesRequest, global::Jaeger.ApiV2.GetServicesResponse>(serviceImpl.GetServices));
      serviceBinder.AddMethod(__Method_GetOperations, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Jaeger.ApiV2.GetOperationsRequest, global::Jaeger.ApiV2.GetOperationsResponse>(serviceImpl.GetOperations));
      serviceBinder.AddMethod(__Method_GetDependencies, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Jaeger.ApiV2.GetDependenciesRequest, global::Jaeger.ApiV2.GetDependenciesResponse>(serviceImpl.GetDependencies));
    }

  }
}
#endregion
