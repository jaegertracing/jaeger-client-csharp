// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: model.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Jaeger.ApiV2 {

  /// <summary>Holder for reflection information generated from model.proto</summary>
  public static partial class ModelReflection {

    #region Descriptor
    /// <summary>File descriptor for model.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ModelReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgttb2RlbC5wcm90bxINamFlZ2VyLmFwaV92MhoUZ29nb3Byb3RvL2dvZ28u",
            "cHJvdG8aH2dvb2dsZS9wcm90b2J1Zi90aW1lc3RhbXAucHJvdG8aHmdvb2ds",
            "ZS9wcm90b2J1Zi9kdXJhdGlvbi5wcm90byKgAQoIS2V5VmFsdWUSCwoDa2V5",
            "GAEgASgJEigKBnZfdHlwZRgCIAEoDjIYLmphZWdlci5hcGlfdjIuVmFsdWVU",
            "eXBlEg0KBXZfc3RyGAMgASgJEg4KBnZfYm9vbBgEIAEoCBIPCgd2X2ludDY0",
            "GAUgASgDEhEKCXZfZmxvYXQ2NBgGIAEoARIQCgh2X2JpbmFyeRgHIAEoDDoI",
            "6KAfAeihHwEibQoDTG9nEjcKCXRpbWVzdGFtcBgBIAEoCzIaLmdvb2dsZS5w",
            "cm90b2J1Zi5UaW1lc3RhbXBCCJDfHwHI3h8AEi0KBmZpZWxkcxgCIAMoCzIX",
            "LmphZWdlci5hcGlfdjIuS2V5VmFsdWVCBMjeHwAikAEKB1NwYW5SZWYSLAoI",
            "dHJhY2VfaWQYASABKAxCGsjeHwDa3h8HVHJhY2VJROLeHwdUcmFjZUlEEikK",
            "B3NwYW5faWQYAiABKAxCGMjeHwDa3h8GU3BhbklE4t4fBlNwYW5JRBIsCghy",
            "ZWZfdHlwZRgDIAEoDjIaLmphZWdlci5hcGlfdjIuU3BhblJlZlR5cGUiTAoH",
            "UHJvY2VzcxIUCgxzZXJ2aWNlX25hbWUYASABKAkSKwoEdGFncxgCIAMoCzIX",
            "LmphZWdlci5hcGlfdjIuS2V5VmFsdWVCBMjeHwAi6wMKBFNwYW4SLAoIdHJh",
            "Y2VfaWQYASABKAxCGsjeHwDa3h8HVHJhY2VJROLeHwdUcmFjZUlEEikKB3Nw",
            "YW5faWQYAiABKAxCGMjeHwDa3h8GU3BhbklE4t4fBlNwYW5JRBIWCg5vcGVy",
            "YXRpb25fbmFtZRgDIAEoCRIwCgpyZWZlcmVuY2VzGAQgAygLMhYuamFlZ2Vy",
            "LmFwaV92Mi5TcGFuUmVmQgTI3h8AEhwKBWZsYWdzGAUgASgNQg3I3h8A2t4f",
            "BUZsYWdzEjgKCnN0YXJ0X3RpbWUYBiABKAsyGi5nb29nbGUucHJvdG9idWYu",
            "VGltZXN0YW1wQgiQ3x8ByN4fABI1CghkdXJhdGlvbhgHIAEoCzIZLmdvb2ds",
            "ZS5wcm90b2J1Zi5EdXJhdGlvbkIImN8fAcjeHwASKwoEdGFncxgIIAMoCzIX",
            "LmphZWdlci5hcGlfdjIuS2V5VmFsdWVCBMjeHwASJgoEbG9ncxgJIAMoCzIS",
            "LmphZWdlci5hcGlfdjIuTG9nQgTI3h8AEicKB3Byb2Nlc3MYCiABKAsyFi5q",
            "YWVnZXIuYXBpX3YyLlByb2Nlc3MSIQoKcHJvY2Vzc19pZBgLIAEoCUIN4t4f",
            "CVByb2Nlc3NJRBIQCgh3YXJuaW5ncxgMIAMoCSLhAQoFVHJhY2USIgoFc3Bh",
            "bnMYASADKAsyEy5qYWVnZXIuYXBpX3YyLlNwYW4SPgoLcHJvY2Vzc19tYXAY",
            "AiADKAsyIy5qYWVnZXIuYXBpX3YyLlRyYWNlLlByb2Nlc3NNYXBwaW5nQgTI",
            "3h8AEhAKCHdhcm5pbmdzGAMgAygJGmIKDlByb2Nlc3NNYXBwaW5nEiEKCnBy",
            "b2Nlc3NfaWQYASABKAlCDeLeHwlQcm9jZXNzSUQSLQoHcHJvY2VzcxgCIAEo",
            "CzIWLmphZWdlci5hcGlfdjIuUHJvY2Vzc0IEyN4fACJaCgVCYXRjaBIiCgVz",
            "cGFucxgBIAMoCzITLmphZWdlci5hcGlfdjIuU3BhbhItCgdwcm9jZXNzGAIg",
            "ASgLMhYuamFlZ2VyLmFwaV92Mi5Qcm9jZXNzQgTI3h8BIlMKDkRlcGVuZGVu",
            "Y3lMaW5rEg4KBnBhcmVudBgBIAEoCRINCgVjaGlsZBgCIAEoCRISCgpjYWxs",
            "X2NvdW50GAMgASgEEg4KBnNvdXJjZRgEIAEoCSpFCglWYWx1ZVR5cGUSCgoG",
            "U1RSSU5HEAASCAoEQk9PTBABEgkKBUlOVDY0EAISCwoHRkxPQVQ2NBADEgoK",
            "BkJJTkFSWRAEKi0KC1NwYW5SZWZUeXBlEgwKCENISUxEX09GEAASEAoMRk9M",
            "TE9XU19GUk9NEAFCMAoXaW8uamFlZ2VydHJhY2luZy5hcGlfdjJaBW1vZGVs",
            "yOIeAdDiHgHg4h4BwOMeAWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Gogoproto.GogoReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.DurationReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Jaeger.ApiV2.ValueType), typeof(global::Jaeger.ApiV2.SpanRefType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Jaeger.ApiV2.KeyValue), global::Jaeger.ApiV2.KeyValue.Parser, new[]{ "Key", "VType", "VStr", "VBool", "VInt64", "VFloat64", "VBinary" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jaeger.ApiV2.Log), global::Jaeger.ApiV2.Log.Parser, new[]{ "Timestamp", "Fields" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jaeger.ApiV2.SpanRef), global::Jaeger.ApiV2.SpanRef.Parser, new[]{ "TraceId", "SpanId", "RefType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jaeger.ApiV2.Process), global::Jaeger.ApiV2.Process.Parser, new[]{ "ServiceName", "Tags" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jaeger.ApiV2.Span), global::Jaeger.ApiV2.Span.Parser, new[]{ "TraceId", "SpanId", "OperationName", "References", "Flags", "StartTime", "Duration", "Tags", "Logs", "Process", "ProcessId", "Warnings" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jaeger.ApiV2.Trace), global::Jaeger.ApiV2.Trace.Parser, new[]{ "Spans", "ProcessMap", "Warnings" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Jaeger.ApiV2.Trace.Types.ProcessMapping), global::Jaeger.ApiV2.Trace.Types.ProcessMapping.Parser, new[]{ "ProcessId", "Process" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jaeger.ApiV2.Batch), global::Jaeger.ApiV2.Batch.Parser, new[]{ "Spans", "Process" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jaeger.ApiV2.DependencyLink), global::Jaeger.ApiV2.DependencyLink.Parser, new[]{ "Parent", "Child", "CallCount", "Source" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ValueType {
    [pbr::OriginalName("STRING")] String = 0,
    [pbr::OriginalName("BOOL")] Bool = 1,
    [pbr::OriginalName("INT64")] Int64 = 2,
    [pbr::OriginalName("FLOAT64")] Float64 = 3,
    [pbr::OriginalName("BINARY")] Binary = 4,
  }

  public enum SpanRefType {
    [pbr::OriginalName("CHILD_OF")] ChildOf = 0,
    [pbr::OriginalName("FOLLOWS_FROM")] FollowsFrom = 1,
  }

  #endregion

  #region Messages
  public sealed partial class KeyValue : pb::IMessage<KeyValue> {
    private static readonly pb::MessageParser<KeyValue> _parser = new pb::MessageParser<KeyValue>(() => new KeyValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KeyValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jaeger.ApiV2.ModelReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyValue(KeyValue other) : this() {
      key_ = other.key_;
      vType_ = other.vType_;
      vStr_ = other.vStr_;
      vBool_ = other.vBool_;
      vInt64_ = other.vInt64_;
      vFloat64_ = other.vFloat64_;
      vBinary_ = other.vBinary_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyValue Clone() {
      return new KeyValue(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "v_type" field.</summary>
    public const int VTypeFieldNumber = 2;
    private global::Jaeger.ApiV2.ValueType vType_ = global::Jaeger.ApiV2.ValueType.String;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jaeger.ApiV2.ValueType VType {
      get { return vType_; }
      set {
        vType_ = value;
      }
    }

    /// <summary>Field number for the "v_str" field.</summary>
    public const int VStrFieldNumber = 3;
    private string vStr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VStr {
      get { return vStr_; }
      set {
        vStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "v_bool" field.</summary>
    public const int VBoolFieldNumber = 4;
    private bool vBool_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool VBool {
      get { return vBool_; }
      set {
        vBool_ = value;
      }
    }

    /// <summary>Field number for the "v_int64" field.</summary>
    public const int VInt64FieldNumber = 5;
    private long vInt64_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long VInt64 {
      get { return vInt64_; }
      set {
        vInt64_ = value;
      }
    }

    /// <summary>Field number for the "v_float64" field.</summary>
    public const int VFloat64FieldNumber = 6;
    private double vFloat64_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double VFloat64 {
      get { return vFloat64_; }
      set {
        vFloat64_ = value;
      }
    }

    /// <summary>Field number for the "v_binary" field.</summary>
    public const int VBinaryFieldNumber = 7;
    private pb::ByteString vBinary_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString VBinary {
      get { return vBinary_; }
      set {
        vBinary_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KeyValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KeyValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (VType != other.VType) return false;
      if (VStr != other.VStr) return false;
      if (VBool != other.VBool) return false;
      if (VInt64 != other.VInt64) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(VFloat64, other.VFloat64)) return false;
      if (VBinary != other.VBinary) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (VType != global::Jaeger.ApiV2.ValueType.String) hash ^= VType.GetHashCode();
      if (VStr.Length != 0) hash ^= VStr.GetHashCode();
      if (VBool != false) hash ^= VBool.GetHashCode();
      if (VInt64 != 0L) hash ^= VInt64.GetHashCode();
      if (VFloat64 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(VFloat64);
      if (VBinary.Length != 0) hash ^= VBinary.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (VType != global::Jaeger.ApiV2.ValueType.String) {
        output.WriteRawTag(16);
        output.WriteEnum((int) VType);
      }
      if (VStr.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(VStr);
      }
      if (VBool != false) {
        output.WriteRawTag(32);
        output.WriteBool(VBool);
      }
      if (VInt64 != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(VInt64);
      }
      if (VFloat64 != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(VFloat64);
      }
      if (VBinary.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(VBinary);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (VType != global::Jaeger.ApiV2.ValueType.String) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VType);
      }
      if (VStr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VStr);
      }
      if (VBool != false) {
        size += 1 + 1;
      }
      if (VInt64 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(VInt64);
      }
      if (VFloat64 != 0D) {
        size += 1 + 8;
      }
      if (VBinary.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(VBinary);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KeyValue other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.VType != global::Jaeger.ApiV2.ValueType.String) {
        VType = other.VType;
      }
      if (other.VStr.Length != 0) {
        VStr = other.VStr;
      }
      if (other.VBool != false) {
        VBool = other.VBool;
      }
      if (other.VInt64 != 0L) {
        VInt64 = other.VInt64;
      }
      if (other.VFloat64 != 0D) {
        VFloat64 = other.VFloat64;
      }
      if (other.VBinary.Length != 0) {
        VBinary = other.VBinary;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 16: {
            VType = (global::Jaeger.ApiV2.ValueType) input.ReadEnum();
            break;
          }
          case 26: {
            VStr = input.ReadString();
            break;
          }
          case 32: {
            VBool = input.ReadBool();
            break;
          }
          case 40: {
            VInt64 = input.ReadInt64();
            break;
          }
          case 49: {
            VFloat64 = input.ReadDouble();
            break;
          }
          case 58: {
            VBinary = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Log : pb::IMessage<Log> {
    private static readonly pb::MessageParser<Log> _parser = new pb::MessageParser<Log>(() => new Log());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Log> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jaeger.ApiV2.ModelReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Log() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Log(Log other) : this() {
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      fields_ = other.fields_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Log Clone() {
      return new Log(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "fields" field.</summary>
    public const int FieldsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Jaeger.ApiV2.KeyValue> _repeated_fields_codec
        = pb::FieldCodec.ForMessage(18, global::Jaeger.ApiV2.KeyValue.Parser);
    private readonly pbc::RepeatedField<global::Jaeger.ApiV2.KeyValue> fields_ = new pbc::RepeatedField<global::Jaeger.ApiV2.KeyValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Jaeger.ApiV2.KeyValue> Fields {
      get { return fields_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Log);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Log other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if(!fields_.Equals(other.fields_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      hash ^= fields_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (timestamp_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Timestamp);
      }
      fields_.WriteTo(output, _repeated_fields_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      size += fields_.CalculateSize(_repeated_fields_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Log other) {
      if (other == null) {
        return;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      fields_.Add(other.fields_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 18: {
            fields_.AddEntriesFrom(input, _repeated_fields_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SpanRef : pb::IMessage<SpanRef> {
    private static readonly pb::MessageParser<SpanRef> _parser = new pb::MessageParser<SpanRef>(() => new SpanRef());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpanRef> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jaeger.ApiV2.ModelReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpanRef() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpanRef(SpanRef other) : this() {
      traceId_ = other.traceId_;
      spanId_ = other.spanId_;
      refType_ = other.refType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpanRef Clone() {
      return new SpanRef(this);
    }

    /// <summary>Field number for the "trace_id" field.</summary>
    public const int TraceIdFieldNumber = 1;
    private pb::ByteString traceId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TraceId {
      get { return traceId_; }
      set {
        traceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "span_id" field.</summary>
    public const int SpanIdFieldNumber = 2;
    private pb::ByteString spanId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SpanId {
      get { return spanId_; }
      set {
        spanId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ref_type" field.</summary>
    public const int RefTypeFieldNumber = 3;
    private global::Jaeger.ApiV2.SpanRefType refType_ = global::Jaeger.ApiV2.SpanRefType.ChildOf;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jaeger.ApiV2.SpanRefType RefType {
      get { return refType_; }
      set {
        refType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpanRef);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpanRef other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TraceId != other.TraceId) return false;
      if (SpanId != other.SpanId) return false;
      if (RefType != other.RefType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TraceId.Length != 0) hash ^= TraceId.GetHashCode();
      if (SpanId.Length != 0) hash ^= SpanId.GetHashCode();
      if (RefType != global::Jaeger.ApiV2.SpanRefType.ChildOf) hash ^= RefType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TraceId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(TraceId);
      }
      if (SpanId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(SpanId);
      }
      if (RefType != global::Jaeger.ApiV2.SpanRefType.ChildOf) {
        output.WriteRawTag(24);
        output.WriteEnum((int) RefType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TraceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TraceId);
      }
      if (SpanId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SpanId);
      }
      if (RefType != global::Jaeger.ApiV2.SpanRefType.ChildOf) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RefType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpanRef other) {
      if (other == null) {
        return;
      }
      if (other.TraceId.Length != 0) {
        TraceId = other.TraceId;
      }
      if (other.SpanId.Length != 0) {
        SpanId = other.SpanId;
      }
      if (other.RefType != global::Jaeger.ApiV2.SpanRefType.ChildOf) {
        RefType = other.RefType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TraceId = input.ReadBytes();
            break;
          }
          case 18: {
            SpanId = input.ReadBytes();
            break;
          }
          case 24: {
            RefType = (global::Jaeger.ApiV2.SpanRefType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Process : pb::IMessage<Process> {
    private static readonly pb::MessageParser<Process> _parser = new pb::MessageParser<Process>(() => new Process());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Process> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jaeger.ApiV2.ModelReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Process() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Process(Process other) : this() {
      serviceName_ = other.serviceName_;
      tags_ = other.tags_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Process Clone() {
      return new Process(this);
    }

    /// <summary>Field number for the "service_name" field.</summary>
    public const int ServiceNameFieldNumber = 1;
    private string serviceName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceName {
      get { return serviceName_; }
      set {
        serviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Jaeger.ApiV2.KeyValue> _repeated_tags_codec
        = pb::FieldCodec.ForMessage(18, global::Jaeger.ApiV2.KeyValue.Parser);
    private readonly pbc::RepeatedField<global::Jaeger.ApiV2.KeyValue> tags_ = new pbc::RepeatedField<global::Jaeger.ApiV2.KeyValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Jaeger.ApiV2.KeyValue> Tags {
      get { return tags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Process);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Process other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServiceName != other.ServiceName) return false;
      if(!tags_.Equals(other.tags_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServiceName.Length != 0) hash ^= ServiceName.GetHashCode();
      hash ^= tags_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServiceName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServiceName);
      }
      tags_.WriteTo(output, _repeated_tags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServiceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceName);
      }
      size += tags_.CalculateSize(_repeated_tags_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Process other) {
      if (other == null) {
        return;
      }
      if (other.ServiceName.Length != 0) {
        ServiceName = other.ServiceName;
      }
      tags_.Add(other.tags_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ServiceName = input.ReadString();
            break;
          }
          case 18: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Span : pb::IMessage<Span> {
    private static readonly pb::MessageParser<Span> _parser = new pb::MessageParser<Span>(() => new Span());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Span> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jaeger.ApiV2.ModelReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Span() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Span(Span other) : this() {
      traceId_ = other.traceId_;
      spanId_ = other.spanId_;
      operationName_ = other.operationName_;
      references_ = other.references_.Clone();
      flags_ = other.flags_;
      startTime_ = other.startTime_ != null ? other.startTime_.Clone() : null;
      duration_ = other.duration_ != null ? other.duration_.Clone() : null;
      tags_ = other.tags_.Clone();
      logs_ = other.logs_.Clone();
      process_ = other.process_ != null ? other.process_.Clone() : null;
      processId_ = other.processId_;
      warnings_ = other.warnings_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Span Clone() {
      return new Span(this);
    }

    /// <summary>Field number for the "trace_id" field.</summary>
    public const int TraceIdFieldNumber = 1;
    private pb::ByteString traceId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TraceId {
      get { return traceId_; }
      set {
        traceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "span_id" field.</summary>
    public const int SpanIdFieldNumber = 2;
    private pb::ByteString spanId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SpanId {
      get { return spanId_; }
      set {
        spanId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "operation_name" field.</summary>
    public const int OperationNameFieldNumber = 3;
    private string operationName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OperationName {
      get { return operationName_; }
      set {
        operationName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "references" field.</summary>
    public const int ReferencesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Jaeger.ApiV2.SpanRef> _repeated_references_codec
        = pb::FieldCodec.ForMessage(34, global::Jaeger.ApiV2.SpanRef.Parser);
    private readonly pbc::RepeatedField<global::Jaeger.ApiV2.SpanRef> references_ = new pbc::RepeatedField<global::Jaeger.ApiV2.SpanRef>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Jaeger.ApiV2.SpanRef> References {
      get { return references_; }
    }

    /// <summary>Field number for the "flags" field.</summary>
    public const int FlagsFieldNumber = 5;
    private uint flags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Flags {
      get { return flags_; }
      set {
        flags_ = value;
      }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Timestamp startTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 7;
    private global::Google.Protobuf.WellKnownTypes.Duration duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Jaeger.ApiV2.KeyValue> _repeated_tags_codec
        = pb::FieldCodec.ForMessage(66, global::Jaeger.ApiV2.KeyValue.Parser);
    private readonly pbc::RepeatedField<global::Jaeger.ApiV2.KeyValue> tags_ = new pbc::RepeatedField<global::Jaeger.ApiV2.KeyValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Jaeger.ApiV2.KeyValue> Tags {
      get { return tags_; }
    }

    /// <summary>Field number for the "logs" field.</summary>
    public const int LogsFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Jaeger.ApiV2.Log> _repeated_logs_codec
        = pb::FieldCodec.ForMessage(74, global::Jaeger.ApiV2.Log.Parser);
    private readonly pbc::RepeatedField<global::Jaeger.ApiV2.Log> logs_ = new pbc::RepeatedField<global::Jaeger.ApiV2.Log>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Jaeger.ApiV2.Log> Logs {
      get { return logs_; }
    }

    /// <summary>Field number for the "process" field.</summary>
    public const int ProcessFieldNumber = 10;
    private global::Jaeger.ApiV2.Process process_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jaeger.ApiV2.Process Process {
      get { return process_; }
      set {
        process_ = value;
      }
    }

    /// <summary>Field number for the "process_id" field.</summary>
    public const int ProcessIdFieldNumber = 11;
    private string processId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProcessId {
      get { return processId_; }
      set {
        processId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "warnings" field.</summary>
    public const int WarningsFieldNumber = 12;
    private static readonly pb::FieldCodec<string> _repeated_warnings_codec
        = pb::FieldCodec.ForString(98);
    private readonly pbc::RepeatedField<string> warnings_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Warnings {
      get { return warnings_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Span);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Span other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TraceId != other.TraceId) return false;
      if (SpanId != other.SpanId) return false;
      if (OperationName != other.OperationName) return false;
      if(!references_.Equals(other.references_)) return false;
      if (Flags != other.Flags) return false;
      if (!object.Equals(StartTime, other.StartTime)) return false;
      if (!object.Equals(Duration, other.Duration)) return false;
      if(!tags_.Equals(other.tags_)) return false;
      if(!logs_.Equals(other.logs_)) return false;
      if (!object.Equals(Process, other.Process)) return false;
      if (ProcessId != other.ProcessId) return false;
      if(!warnings_.Equals(other.warnings_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TraceId.Length != 0) hash ^= TraceId.GetHashCode();
      if (SpanId.Length != 0) hash ^= SpanId.GetHashCode();
      if (OperationName.Length != 0) hash ^= OperationName.GetHashCode();
      hash ^= references_.GetHashCode();
      if (Flags != 0) hash ^= Flags.GetHashCode();
      if (startTime_ != null) hash ^= StartTime.GetHashCode();
      if (duration_ != null) hash ^= Duration.GetHashCode();
      hash ^= tags_.GetHashCode();
      hash ^= logs_.GetHashCode();
      if (process_ != null) hash ^= Process.GetHashCode();
      if (ProcessId.Length != 0) hash ^= ProcessId.GetHashCode();
      hash ^= warnings_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TraceId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(TraceId);
      }
      if (SpanId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(SpanId);
      }
      if (OperationName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(OperationName);
      }
      references_.WriteTo(output, _repeated_references_codec);
      if (Flags != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Flags);
      }
      if (startTime_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(StartTime);
      }
      if (duration_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Duration);
      }
      tags_.WriteTo(output, _repeated_tags_codec);
      logs_.WriteTo(output, _repeated_logs_codec);
      if (process_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Process);
      }
      if (ProcessId.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ProcessId);
      }
      warnings_.WriteTo(output, _repeated_warnings_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TraceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TraceId);
      }
      if (SpanId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SpanId);
      }
      if (OperationName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OperationName);
      }
      size += references_.CalculateSize(_repeated_references_codec);
      if (Flags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Flags);
      }
      if (startTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTime);
      }
      if (duration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Duration);
      }
      size += tags_.CalculateSize(_repeated_tags_codec);
      size += logs_.CalculateSize(_repeated_logs_codec);
      if (process_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Process);
      }
      if (ProcessId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProcessId);
      }
      size += warnings_.CalculateSize(_repeated_warnings_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Span other) {
      if (other == null) {
        return;
      }
      if (other.TraceId.Length != 0) {
        TraceId = other.TraceId;
      }
      if (other.SpanId.Length != 0) {
        SpanId = other.SpanId;
      }
      if (other.OperationName.Length != 0) {
        OperationName = other.OperationName;
      }
      references_.Add(other.references_);
      if (other.Flags != 0) {
        Flags = other.Flags;
      }
      if (other.startTime_ != null) {
        if (startTime_ == null) {
          StartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        StartTime.MergeFrom(other.StartTime);
      }
      if (other.duration_ != null) {
        if (duration_ == null) {
          Duration = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        Duration.MergeFrom(other.Duration);
      }
      tags_.Add(other.tags_);
      logs_.Add(other.logs_);
      if (other.process_ != null) {
        if (process_ == null) {
          Process = new global::Jaeger.ApiV2.Process();
        }
        Process.MergeFrom(other.Process);
      }
      if (other.ProcessId.Length != 0) {
        ProcessId = other.ProcessId;
      }
      warnings_.Add(other.warnings_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TraceId = input.ReadBytes();
            break;
          }
          case 18: {
            SpanId = input.ReadBytes();
            break;
          }
          case 26: {
            OperationName = input.ReadString();
            break;
          }
          case 34: {
            references_.AddEntriesFrom(input, _repeated_references_codec);
            break;
          }
          case 40: {
            Flags = input.ReadUInt32();
            break;
          }
          case 50: {
            if (startTime_ == null) {
              StartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(StartTime);
            break;
          }
          case 58: {
            if (duration_ == null) {
              Duration = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(Duration);
            break;
          }
          case 66: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
          case 74: {
            logs_.AddEntriesFrom(input, _repeated_logs_codec);
            break;
          }
          case 82: {
            if (process_ == null) {
              Process = new global::Jaeger.ApiV2.Process();
            }
            input.ReadMessage(Process);
            break;
          }
          case 90: {
            ProcessId = input.ReadString();
            break;
          }
          case 98: {
            warnings_.AddEntriesFrom(input, _repeated_warnings_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Trace : pb::IMessage<Trace> {
    private static readonly pb::MessageParser<Trace> _parser = new pb::MessageParser<Trace>(() => new Trace());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Trace> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jaeger.ApiV2.ModelReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Trace() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Trace(Trace other) : this() {
      spans_ = other.spans_.Clone();
      processMap_ = other.processMap_.Clone();
      warnings_ = other.warnings_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Trace Clone() {
      return new Trace(this);
    }

    /// <summary>Field number for the "spans" field.</summary>
    public const int SpansFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Jaeger.ApiV2.Span> _repeated_spans_codec
        = pb::FieldCodec.ForMessage(10, global::Jaeger.ApiV2.Span.Parser);
    private readonly pbc::RepeatedField<global::Jaeger.ApiV2.Span> spans_ = new pbc::RepeatedField<global::Jaeger.ApiV2.Span>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Jaeger.ApiV2.Span> Spans {
      get { return spans_; }
    }

    /// <summary>Field number for the "process_map" field.</summary>
    public const int ProcessMapFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Jaeger.ApiV2.Trace.Types.ProcessMapping> _repeated_processMap_codec
        = pb::FieldCodec.ForMessage(18, global::Jaeger.ApiV2.Trace.Types.ProcessMapping.Parser);
    private readonly pbc::RepeatedField<global::Jaeger.ApiV2.Trace.Types.ProcessMapping> processMap_ = new pbc::RepeatedField<global::Jaeger.ApiV2.Trace.Types.ProcessMapping>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Jaeger.ApiV2.Trace.Types.ProcessMapping> ProcessMap {
      get { return processMap_; }
    }

    /// <summary>Field number for the "warnings" field.</summary>
    public const int WarningsFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_warnings_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> warnings_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Warnings {
      get { return warnings_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Trace);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Trace other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!spans_.Equals(other.spans_)) return false;
      if(!processMap_.Equals(other.processMap_)) return false;
      if(!warnings_.Equals(other.warnings_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= spans_.GetHashCode();
      hash ^= processMap_.GetHashCode();
      hash ^= warnings_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      spans_.WriteTo(output, _repeated_spans_codec);
      processMap_.WriteTo(output, _repeated_processMap_codec);
      warnings_.WriteTo(output, _repeated_warnings_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += spans_.CalculateSize(_repeated_spans_codec);
      size += processMap_.CalculateSize(_repeated_processMap_codec);
      size += warnings_.CalculateSize(_repeated_warnings_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Trace other) {
      if (other == null) {
        return;
      }
      spans_.Add(other.spans_);
      processMap_.Add(other.processMap_);
      warnings_.Add(other.warnings_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            spans_.AddEntriesFrom(input, _repeated_spans_codec);
            break;
          }
          case 18: {
            processMap_.AddEntriesFrom(input, _repeated_processMap_codec);
            break;
          }
          case 26: {
            warnings_.AddEntriesFrom(input, _repeated_warnings_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Trace message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class ProcessMapping : pb::IMessage<ProcessMapping> {
        private static readonly pb::MessageParser<ProcessMapping> _parser = new pb::MessageParser<ProcessMapping>(() => new ProcessMapping());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ProcessMapping> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Jaeger.ApiV2.Trace.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ProcessMapping() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ProcessMapping(ProcessMapping other) : this() {
          processId_ = other.processId_;
          process_ = other.process_ != null ? other.process_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ProcessMapping Clone() {
          return new ProcessMapping(this);
        }

        /// <summary>Field number for the "process_id" field.</summary>
        public const int ProcessIdFieldNumber = 1;
        private string processId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ProcessId {
          get { return processId_; }
          set {
            processId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "process" field.</summary>
        public const int ProcessFieldNumber = 2;
        private global::Jaeger.ApiV2.Process process_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Jaeger.ApiV2.Process Process {
          get { return process_; }
          set {
            process_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ProcessMapping);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ProcessMapping other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ProcessId != other.ProcessId) return false;
          if (!object.Equals(Process, other.Process)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ProcessId.Length != 0) hash ^= ProcessId.GetHashCode();
          if (process_ != null) hash ^= Process.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ProcessId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(ProcessId);
          }
          if (process_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Process);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ProcessId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ProcessId);
          }
          if (process_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Process);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ProcessMapping other) {
          if (other == null) {
            return;
          }
          if (other.ProcessId.Length != 0) {
            ProcessId = other.ProcessId;
          }
          if (other.process_ != null) {
            if (process_ == null) {
              Process = new global::Jaeger.ApiV2.Process();
            }
            Process.MergeFrom(other.Process);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                ProcessId = input.ReadString();
                break;
              }
              case 18: {
                if (process_ == null) {
                  Process = new global::Jaeger.ApiV2.Process();
                }
                input.ReadMessage(Process);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class Batch : pb::IMessage<Batch> {
    private static readonly pb::MessageParser<Batch> _parser = new pb::MessageParser<Batch>(() => new Batch());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Batch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jaeger.ApiV2.ModelReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Batch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Batch(Batch other) : this() {
      spans_ = other.spans_.Clone();
      process_ = other.process_ != null ? other.process_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Batch Clone() {
      return new Batch(this);
    }

    /// <summary>Field number for the "spans" field.</summary>
    public const int SpansFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Jaeger.ApiV2.Span> _repeated_spans_codec
        = pb::FieldCodec.ForMessage(10, global::Jaeger.ApiV2.Span.Parser);
    private readonly pbc::RepeatedField<global::Jaeger.ApiV2.Span> spans_ = new pbc::RepeatedField<global::Jaeger.ApiV2.Span>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Jaeger.ApiV2.Span> Spans {
      get { return spans_; }
    }

    /// <summary>Field number for the "process" field.</summary>
    public const int ProcessFieldNumber = 2;
    private global::Jaeger.ApiV2.Process process_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jaeger.ApiV2.Process Process {
      get { return process_; }
      set {
        process_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Batch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Batch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!spans_.Equals(other.spans_)) return false;
      if (!object.Equals(Process, other.Process)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= spans_.GetHashCode();
      if (process_ != null) hash ^= Process.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      spans_.WriteTo(output, _repeated_spans_codec);
      if (process_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Process);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += spans_.CalculateSize(_repeated_spans_codec);
      if (process_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Process);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Batch other) {
      if (other == null) {
        return;
      }
      spans_.Add(other.spans_);
      if (other.process_ != null) {
        if (process_ == null) {
          Process = new global::Jaeger.ApiV2.Process();
        }
        Process.MergeFrom(other.Process);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            spans_.AddEntriesFrom(input, _repeated_spans_codec);
            break;
          }
          case 18: {
            if (process_ == null) {
              Process = new global::Jaeger.ApiV2.Process();
            }
            input.ReadMessage(Process);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DependencyLink : pb::IMessage<DependencyLink> {
    private static readonly pb::MessageParser<DependencyLink> _parser = new pb::MessageParser<DependencyLink>(() => new DependencyLink());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DependencyLink> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jaeger.ApiV2.ModelReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DependencyLink() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DependencyLink(DependencyLink other) : this() {
      parent_ = other.parent_;
      child_ = other.child_;
      callCount_ = other.callCount_;
      source_ = other.source_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DependencyLink Clone() {
      return new DependencyLink(this);
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 1;
    private string parent_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Parent {
      get { return parent_; }
      set {
        parent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "child" field.</summary>
    public const int ChildFieldNumber = 2;
    private string child_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Child {
      get { return child_; }
      set {
        child_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "call_count" field.</summary>
    public const int CallCountFieldNumber = 3;
    private ulong callCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CallCount {
      get { return callCount_; }
      set {
        callCount_ = value;
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 4;
    private string source_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Source {
      get { return source_; }
      set {
        source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DependencyLink);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DependencyLink other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Parent != other.Parent) return false;
      if (Child != other.Child) return false;
      if (CallCount != other.CallCount) return false;
      if (Source != other.Source) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Parent.Length != 0) hash ^= Parent.GetHashCode();
      if (Child.Length != 0) hash ^= Child.GetHashCode();
      if (CallCount != 0UL) hash ^= CallCount.GetHashCode();
      if (Source.Length != 0) hash ^= Source.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Parent.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Parent);
      }
      if (Child.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Child);
      }
      if (CallCount != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(CallCount);
      }
      if (Source.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Source);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Parent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Parent);
      }
      if (Child.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Child);
      }
      if (CallCount != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CallCount);
      }
      if (Source.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Source);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DependencyLink other) {
      if (other == null) {
        return;
      }
      if (other.Parent.Length != 0) {
        Parent = other.Parent;
      }
      if (other.Child.Length != 0) {
        Child = other.Child;
      }
      if (other.CallCount != 0UL) {
        CallCount = other.CallCount;
      }
      if (other.Source.Length != 0) {
        Source = other.Source;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Parent = input.ReadString();
            break;
          }
          case 18: {
            Child = input.ReadString();
            break;
          }
          case 24: {
            CallCount = input.ReadUInt64();
            break;
          }
          case 34: {
            Source = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
