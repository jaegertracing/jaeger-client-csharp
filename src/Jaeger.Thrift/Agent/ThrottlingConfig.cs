/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


namespace Jaeger.Thrift.Agent
{

  public partial class ThrottlingConfig : TBase
  {

    public int MaxOperations { get; set; }

    public double CreditsPerSecond { get; set; }

    public double MaxBalance { get; set; }

    public ThrottlingConfig()
    {
    }

    public ThrottlingConfig(int maxOperations, double creditsPerSecond, double maxBalance) : this()
    {
      this.MaxOperations = maxOperations;
      this.CreditsPerSecond = creditsPerSecond;
      this.MaxBalance = maxBalance;
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_maxOperations = false;
        bool isset_creditsPerSecond = false;
        bool isset_maxBalance = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                MaxOperations = await iprot.ReadI32Async(cancellationToken);
                isset_maxOperations = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Double)
              {
                CreditsPerSecond = await iprot.ReadDoubleAsync(cancellationToken);
                isset_creditsPerSecond = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Double)
              {
                MaxBalance = await iprot.ReadDoubleAsync(cancellationToken);
                isset_maxBalance = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_maxOperations)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_creditsPerSecond)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_maxBalance)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("ThrottlingConfig");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        field.Name = "maxOperations";
        field.Type = TType.I32;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(MaxOperations, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "creditsPerSecond";
        field.Type = TType.Double;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteDoubleAsync(CreditsPerSecond, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "maxBalance";
        field.Type = TType.Double;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteDoubleAsync(MaxBalance, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as ThrottlingConfig;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return System.Object.Equals(MaxOperations, other.MaxOperations)
        && System.Object.Equals(CreditsPerSecond, other.CreditsPerSecond)
        && System.Object.Equals(MaxBalance, other.MaxBalance);
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        hashcode = (hashcode * 397) + MaxOperations.GetHashCode();
        hashcode = (hashcode * 397) + CreditsPerSecond.GetHashCode();
        hashcode = (hashcode * 397) + MaxBalance.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("ThrottlingConfig(");
      sb.Append(", MaxOperations: ");
      sb.Append(MaxOperations);
      sb.Append(", CreditsPerSecond: ");
      sb.Append(CreditsPerSecond);
      sb.Append(", MaxBalance: ");
      sb.Append(MaxBalance);
      sb.Append(")");
      return sb.ToString();
    }
  }

}
