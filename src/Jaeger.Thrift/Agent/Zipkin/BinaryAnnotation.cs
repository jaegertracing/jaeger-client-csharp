/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;


namespace Jaeger.Thrift.Agent.Zipkin
{

  /// <summary>
  /// Binary annotations are tags applied to a Span to give it context. For
  /// example, a binary annotation of "http.uri" could the path to a resource in a
  /// RPC call.
  /// 
  /// Binary annotations of type STRING are always queryable, though more a
  /// historical implementation detail than a structural concern.
  /// 
  /// Binary annotations can repeat, and vary on the host. Similar to Annotation,
  /// the host indicates who logged the event. This allows you to tell the
  /// difference between the client and server side of the same key. For example,
  /// the key "http.uri" might be different on the client and server side due to
  /// rewriting, like "/api/v1/myresource" vs "/myresource. Via the host field,
  /// you can see the different points of view, which often help in debugging.
  /// </summary>
  public partial class BinaryAnnotation : TBase
  {
    private string _key;
    private byte[] _value;
    private AnnotationType _annotation_type;
    private Endpoint _host;

    public string Key
    {
      get
      {
        return _key;
      }
      set
      {
        __isset.key = true;
        this._key = value;
      }
    }

    public byte[] Value
    {
      get
      {
        return _value;
      }
      set
      {
        __isset.@value = true;
        this._value = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="AnnotationType"/>
    /// </summary>
    public AnnotationType Annotation_type
    {
      get
      {
        return _annotation_type;
      }
      set
      {
        __isset.annotation_type = true;
        this._annotation_type = value;
      }
    }

    /// <summary>
    /// The host that recorded tag, which allows you to differentiate between
    /// multiple tags with the same key. There are two exceptions to this.
    /// 
    /// When the key is CLIENT_ADDR or SERVER_ADDR, host indicates the source or
    /// destination of an RPC. This exception allows zipkin to display network
    /// context of uninstrumented services, or clients such as web browsers.
    /// </summary>
    public Endpoint Host
    {
      get
      {
        return _host;
      }
      set
      {
        __isset.host = true;
        this._host = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool key;
      public bool @value;
      public bool annotation_type;
      public bool host;
    }

    public BinaryAnnotation()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Key = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Value = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I32)
              {
                Annotation_type = (AnnotationType)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Struct)
              {
                Host = new Endpoint();
                await Host.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("BinaryAnnotation");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (Key != null && __isset.key)
        {
          field.Name = "key";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Key, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Value != null && __isset.@value)
        {
          field.Name = "value";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(Value, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.annotation_type)
        {
          field.Name = "annotation_type";
          field.Type = TType.I32;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async((int)Annotation_type, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Host != null && __isset.host)
        {
          field.Name = "host";
          field.Type = TType.Struct;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await Host.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("BinaryAnnotation(");
      bool __first = true;
      if (Key != null && __isset.key)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Key: ");
        sb.Append(Key);
      }
      if (Value != null && __isset.@value)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Value: ");
        sb.Append(Value);
      }
      if (__isset.annotation_type)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Annotation_type: ");
        sb.Append(Annotation_type);
      }
      if (Host != null && __isset.host)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Host: ");
        sb.Append(Host== null ? "<null>" : Host.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
