/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;


namespace Jaeger.Thrift.Crossdock
{

  /// <summary>
  /// Each server must include the information about the span it observed.
  /// It can only be omitted from the response if notImplementedError field is not empty.
  /// If the server was instructed to make a downstream call, it must embed the
  /// downstream response in its own response.
  /// </summary>
  public partial class TraceResponse : TBase
  {
    private ObservedSpan _span;
    private TraceResponse _downstream;

    public ObservedSpan Span
    {
      get
      {
        return _span;
      }
      set
      {
        __isset.span = true;
        this._span = value;
      }
    }

    public TraceResponse Downstream
    {
      get
      {
        return _downstream;
      }
      set
      {
        __isset.downstream = true;
        this._downstream = value;
      }
    }

    public string NotImplementedError { get; set; }


    public Isset __isset;
    public struct Isset
    {
      public bool span;
      public bool downstream;
    }

    public TraceResponse()
    {
    }

    public TraceResponse(string notImplementedError) : this()
    {
      this.NotImplementedError = notImplementedError;
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_notImplementedError = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                Span = new ObservedSpan();
                await Span.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                Downstream = new TraceResponse();
                await Downstream.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                NotImplementedError = await iprot.ReadStringAsync(cancellationToken);
                isset_notImplementedError = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_notImplementedError)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("TraceResponse");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (Span != null && __isset.span)
        {
          field.Name = "span";
          field.Type = TType.Struct;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await Span.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Downstream != null && __isset.downstream)
        {
          field.Name = "downstream";
          field.Type = TType.Struct;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await Downstream.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        field.Name = "notImplementedError";
        field.Type = TType.String;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(NotImplementedError, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("TraceResponse(");
      bool __first = true;
      if (Span != null && __isset.span)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Span: ");
        sb.Append(Span== null ? "<null>" : Span.ToString());
      }
      if (Downstream != null && __isset.downstream)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Downstream: ");
        sb.Append(Downstream);
      }
      if(!__first) { sb.Append(", "); }
      sb.Append("NotImplementedError: ");
      sb.Append(NotImplementedError);
      sb.Append(")");
      return sb.ToString();
    }
  }

}
